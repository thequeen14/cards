<!DOCTYPE html>
<html>
    <head>
	<script src="http://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
	
	<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css" rel="stylesheet" />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>
	
	<script src="https://code.highcharts.com/highcharts.js"></script>
	<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
		<style>
html {
	//height: 100%;
	//border: solid 2px gray;
}

body {
	//height: 100%;
	//border: solid 2px black;
}

.temporaryStartPicture {
	width: 100%;
	//height: 800px;
	height: 100vh;
}

//.temporaryStartPicture img {
	//width: 100%;
	//height: 100%;
	//opacity: 1;
	//object-fit: contain;
//}
		
.mainConfigurationMenu {
	position: fixed;
	z-index: 2000;
	//height: 100%;
	width: 200px;
	//display: none;
	left: -1000px;
	//flex-wrap: wrap;
	background-color: white;
	border: 1px solid lightgray;
	top: 5px;
	bottom: 5px;
}

.closeMainConfigurationMenu {
	display: flex;
	width: 20px;
	height: 20px;
	margin: 5px 5px 5px 5px;
}

.backgroundStyleChooseDiv {
	display: flex;
	//width: 100%;
	right: 0;
	left: 0;
	height: 50px;
	margin: 3px 3px 3px 3px;
}

.showHideBackgroundStyleChoice {
	display: none;
	margin: 5px;
	width: 100%;
	height: 50px;
}

.showHideBackgroundStyleChoice > div {
	display: flex;
	width: 20px;
	height: 20px;
	margin: 3px 3px 3px 3px;
	border: solid 1px black;
}

.paperChoice {
	background-color: #ffffff;
	background-size: 100% 1.2em;
	background-image:
	linear-gradient(90deg, transparent 320px, #abced4 320px, #abced4 322px, transparent 322px),
	linear-gradient(#eeeeee .1em, transparent .1em);
	//linear-gradient(90deg, transparent 79px, rgba(171, 206, 212, 1) 79px, rgba(171, 206, 212, 1) 81px, transparent 81px),
	//linear-gradient(rgba(238, 238, 238, 1) .1em, transparent .1em);
}

.yellowChoice {
	//background-color: yellow;
	//background: linear-gradient(#ff8c00, #ffff00);
	background: repeating-linear-gradient(90deg, transparent, transparent 50px,
        rgba(255, 127, 0, 0.25) 50px, rgba(255, 127, 0, 0.25) 56px,
        transparent 56px, transparent 63px,
        rgba(255, 127, 0, 0.25) 63px, rgba(255, 127, 0, 0.25) 69px,
        transparent 69px, transparent 116px,
        rgba(255, 206, 0, 0.25) 116px, rgba(255, 206, 0, 0.25) 166px),
      repeating-linear-gradient(0deg, transparent, transparent 50px,
        rgba(255, 127, 0, 0.25) 50px, rgba(255, 127, 0, 0.25) 56px,
        transparent 56px, transparent 63px,
        rgba(255, 127, 0, 0.25) 63px, rgba(255, 127, 0, 0.25) 69px,
        transparent 69px, transparent 116px,
        rgba(255, 206, 0, 0.25) 116px, rgba(255, 206, 0, 0.25) 166px),
      repeating-linear-gradient(-45deg, transparent, transparent 5px,
        rgba(143, 77, 63, 0.25) 5px, rgba(143, 77, 63, 0.25) 10px),
      repeating-linear-gradient(45deg, transparent, transparent 5px,
        rgba(143, 77, 63, 0.25) 5px, rgba(143, 77, 63, 0.25) 10px);
}

.skyblueChoice {
	background-color: skyblue;
}
		
.cardsContainer {
  display: flex;
  width: 100%;
  height: 100%;
  flex-wrap: wrap;
}

.cardArea {
  display: flex;
  float: left;
}

.material-card {
  display: flex;
  //border: 2px solid black;
  margin: 10px 10px 10px 10px;
  width: 400px;
  height: 400px;
  justify-content: center;
  background-color: none;
  position: relative;
  perspective: 1000px;
}

.front, .back {
	border: 1px solid darkgray;
	backface-visibility: hidden;
	position: absolute;
	width: 100%;
	height: 100%;
	transition: transform 1s;
}

.front {
background-color: skyblue;
opacity: 0.9;
  z-index: 2;
}

.back {
background-color: lightgreen;
opacity: 0.9;
  transform: rotateY(180deg);
}

.select2
{
 width: 300px;
 float: right;
 clear: right;
}

.newTaskContainerUnderlayingDiv {
	position: static;
	height: 100px;
}

.newTaskContainer {
	clear: both;
	//width: 100%;
	//width: 100vw;
	position: fixed;
	z-index: 1500;
	background-color: #ffffff;
	right: 5px;
	left: 5px;
	margin: 0 5px 0 5px;
}

.titleBarNewTask {
	width: 100%;
	height: 50px;
	background: lightgray;
	padding: 3px;
}

.titleBarNewTask > label {
	float: left;
	height: 50%;
	margin: 10px 10px 10px 10px;
	font-weight: bold;
	color: darkslategray;
}

.expandButtonSVG {
	float: right;
	margin: 10px 10px 10px 10px;
}

.barNewTaskInsides {
	display: none;
	margin-top: 10px;
}

.barNewTaskInsidesTitle {
	width: 40%;
}

.barNewTaskInsidesTask {
	width: 50%;
}

.barNewTaskInsidesTitle, .barNewTaskInsidesTask {
	height: 30px;
	padding: 3px;
	font-family: sans serif;
	font-size: 100%;
	color: slategray;
}

.addNewTaskButton {
	font-weight: bold;
	color: darkslategray;
	width: 10%;
}

.titleText, .taskText {
	border: none;
	width: 100%;
	height: auto;
	resize: none;
	font-family: serif;
	font-size: 100%;
}

.titleText {
	background-color: skyblue;
	font-weight: bold;
}

.taskText {
	background-color: skyblue;
}

.addNewSubtaskButton {
	float: right;
	//width: 40px;
	//height: 40px;
}

.addNewSubtaskButtonSVG {
	float: right;
	width: 30px;
	height: 30px;
	margin: 5px 5px 5px 5px;
}

.elementsLayingOverFunctionalElements {
	pointer-events: none;
	fill: darkslategray;
}

.boxsizingBorder {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}

.draggableAreaOnCard, .flippableAreaOnCard, .closeableAreaOnCard{
	margin-bottom: 5px;
}

.draggableAreaOnCard, .flippableAreaOnCard {
	display: flex;
	justify-content: center;
}

.showMenuWithConfigurationButton {
	display: inline-block;
	float: left;
	margin: 10px 10px 10px 10px;
}
		</style>
	</head>
    <body>
<div class='mainConfigurationMenu'><div class='closeMainConfigurationMenu'><svg class='hideMainConfigurationMenu elementsLayingOverFunctionalElements' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
    <path d="M0 0h24v24H0z" fill="none"/>
</svg></div>
<div style='clear: both' class='mainConfigurationMenuStretch'></div>
<div class='backgroundStyleChooseDiv'><div>Choose front background style</div><div class='expandFrontStyleChoiceSVGWrapDiv'><svg class='expandFrontStyleChoice elementsLayingOverFunctionalElements' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/>
    <path d="M0 0h24v24H0z" fill="none"/>
	</svg></div></div>
<div class='showHideBackgroundStyleChoice showHideFrontBackgroundStyleChoice' width='50px' height='50px'><div class='paperChoice'></div><div class='yellowChoice'></div><div class='skyblueChoice'></div></div>
<div class='backgroundStyleChooseDiv'><div>Choose back background style</div><div class='expandBackStyleChoiceSVGWrapDiv'><svg class='expandBackStyleChoice elementsLayingOverFunctionalElements' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/>
    <path d="M0 0h24v24H0z" fill="none"/>
	</svg></div></div>
<div class='showHideBackgroundStyleChoice showHideBackBackgroundStyleChoice' width='50px' height='50px'><div class='paperChoice'></div><div class='yellowChoice'></div><div class='skyblueChoice'></div></div>
</div>
<div class="newTaskContainer mainContainer">
  <div class="titleBarNewTask">
  <div class='showMenuWithConfigurationButton'><svg class='showMenuWithConfigurationButtonSVG elementsLayingOverFunctionalElements' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
</svg></div>
  <label class="newTaskLabel">New Task</label>
  <div class='expandButtonSVG'><svg class='hideShowBarNewTask' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/>
    <path d="M0 0h24v24H0z" fill="none"/>
	</svg></div>
  <!--<label class="newTaskLabel">New Task</label><input type='button' class='hideShowBarNewTask' value='+'/>-->
  </div>
  <div class='barNewTaskInsides'> 
  <input type='text' class='barNewTaskInsidesTitle' name='Title' value='Title'/>
  <!--<select class = 'select2' name='cards' multiple='multiple'></select>-->
  <input type='text' class='barNewTaskInsidesTask' name='Task' value='Task'/>
  <input type='button' class='addNewTaskButton' value='Add'/>
  </div>
  </div>
<div style='clear: both' class='newTaskContainerUnderlayingDiv'></div>
<div class='cardsContainer mainContainer' id='cardsContainer_0'>
<div class='temporaryStartPicture'><img src='C:/Users/IrinaK/Documents/dragAndDropCards/Finalize it/BackgroundTempImg/1.png' style='float: left;'>
<img src='C:/Users/IrinaK/Documents/dragAndDropCards/Finalize it/BackgroundTempImg/2.png' style='float: right;'>
<div style='clear: both'></div>
<img src='C:/Users/IrinaK/Documents/dragAndDropCards/Finalize it/BackgroundTempImg/3.png' style='display: block; margin-left: auto; margin-right: auto; top: auto; bottom: auto;'>
<div style='clear: both'></div>
<img src='C:/Users/IrinaK/Documents/dragAndDropCards/Finalize it/BackgroundTempImg/4.png' style='display: block; margin-left: auto; margin-right: auto;'>
<!--<img src='C:/Users/IrinaK/Documents/dragAndDropCards/Finalize it/BackgroundTempImg/tempBackground1.png'>--></div>
  <div style='clear: both' class='cardsContainerStretch'></div>
</div>

<br>
<script src="cardsLib.js"></script>
<script>
	var newTaskContainerClassName = 'newTaskContainer';
	var hideShowBarNewTaskClassName = 'hideShowBarNewTask';
	var barNewTaskInsidesClassName = 'barNewTaskInsides';
	var addNewTaskButtonClassName = 'addNewTaskButton';
	var addNewSubtaskButtonClassName = 'addNewSubtaskButton';
	var barNewTaskInsidesTitleClassName = 'barNewTaskInsidesTitle';
	var barNewTaskInsidesTaskClassName = 'barNewTaskInsidesTask';
	var newSubtaskInsidesTitleClassName = 'newSubtaskInsidesTitle';
	var newSubtaskInsidesTaskClassName = 'newSubtaskInsidesTask';
	var showMenuWithConfigurationButtonClassName = 'showMenuWithConfigurationButton';
	var mainConfigurationMenuClassName = 'mainConfigurationMenu';
	var closeMainConfigurationMenuDivClassName = 'closeMainConfigurationMenu';
	var backgroundStyleChoiceClassName = 'showHideBackgroundStyleChoice';
	var showHideFrontBackgroundStyleChoiceClassName = 'showHideFrontBackgroundStyleChoice';
	var showHideBackBackgroundStyleChoiceClassName = 'showHideBackBackgroundStyleChoice';
	var selectSubtasksClassName = 'select2-subtasks';
	var taskTextClassName = 'taskText';
	var titleTextClassName = 'titleText';
	var boxSizingItemsClassName = 'boxsizingBorder';
	var elementsLayingOverFunctionalElementsClassName = 'elementsLayingOverFunctionalElements';
	var addNewSubtaskButtonSVGClassName = 'addNewSubtaskButtonSVG';
	var expandButtonSVGWrappingDivClassName = 'expandButtonSVG';
	var innerHTMLForExpandLessSVG = '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
	var innerHTMLForExpandMoreSVG = '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
	//var innerHTMLForExpandLessSVG = '<svg class=\'' + hideShowBarNewTaskClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
	//var innerHTMLForExpandMoreSVG = '<svg class=\'' + hideShowBarNewTaskClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
	//var innerHTMLForExpandLessSVG = '<svg class=\'' + hideShowBarNewTaskClassName + ' ' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
	//var innerHTMLForExpandMoreSVG = '<svg class=\'' + hideShowBarNewTaskClassName + ' ' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
	var innerHTMLForSubtasks = '<svg class=\'' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M19 15l-6 6-1.42-1.42L15.17 16H4V4h2v10h9.17l-3.59-3.58L13 9l6 6z"/></svg>'
	var innerHTMLForSubtasksBackToMainTask = '<svg class=\'' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/></svg>'
	var innerHTMLForShuffleCards = '<svg class=\'' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z"/></svg>'
	var innerHTMLForCloseArea = '<svg class=\'' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
	var innerHTMLForCheckArea = '<svg class=\'' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>'
	var innerHTMLForAddArea = '<svg class=\'' + addNewSubtaskButtonSVGClassName + ' ' + elementsLayingOverFunctionalElementsClassName + '\' fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>'
	var mainContainersClassName = 'mainContainer';
	var keyForMainContainersOpacityFromSessionStorage = 'mainContainersOpacity';
	var backgroundStyleFrontChooseDivClassName = 'backgroundStyleFrontChooseDiv';
	var expandFrontStyleChoiceSVGWrapDivClassName = 'expandFrontStyleChoiceSVGWrapDiv';
	var backgroundStyleBackChooseDivClassName = 'backgroundStyleBackChooseDiv';
	var expandBackStyleChoiceSVGWrapDivClassName = 'expandBackStyleChoiceSVGWrapDiv';
	var temporaryStartPictureClassname = 'temporaryStartPicture';
	
	var cardsContainerClassName = 'cardsContainer';
	var cardsClassName = 'material-card';
	var innerCardsClassName = 'inner-card';
	var cardAreasClassName = 'cardArea';
	var cardFrontClassName = 'front';
	var cardBackClassName = 'back';
	var draggableAreaOnCardClassName = 'draggableAreaOnCard';
	var flippableAreaOnCardClassName = 'flippableAreaOnCard';
	var closeableAreaOnCardClassName = 'closeableAreaOnCard';
	var checkableAreaOnCardClassName = 'checkableAreaOnCard';
	
setInitialCardOrders();
configureCardAreasWidth();
window.addEventListener('resize', configureCardAreasWidth);
window.addEventListener('DOMContentLoaded', onLoadHandler);
$(document).ready(initializeSelectDropdownForCards);
initializeOptionsForCardsDropdown();
makeCardsCheckable(cards);
makeCardsDraggable(cards);
makeCardsFlippable(cards);
makeCardsFlippable(innerCards);
makeCardsCloseable(cards);
//$(cardsContainer).on('DOMNodeInserted', handleNewCardAppearance);
	
	initial();

	function initial() {
		//$(document).ready(makeHideShowButtonReactOnClick);
		$(document).ready(makeAddButtonAddNewTask);
		var barNewTaskInsidesTitle = document.getElementsByClassName(barNewTaskInsidesTitleClassName)[0];
		var barNewTaskInsidesTask = document.getElementsByClassName(barNewTaskInsidesTaskClassName)[0];
		makeTextInputAutoclear(barNewTaskInsidesTitle, barNewTaskInsidesTitle.value);
		makeTextInputAutoclear(barNewTaskInsidesTask, barNewTaskInsidesTask.value);
		makeShowMainMenuButtonReactOnClick();
		makeHideMainMenuButtonReactOnClick();
		//makeNewTaskContainerFollowScroll();
		var frontStyleChoices = document.getElementsByClassName(showHideFrontBackgroundStyleChoiceClassName)[0].childNodes;
		var cardFronts = document.getElementsByClassName(cardFrontClassName);
		makeColorChoicesChangeColor(frontStyleChoices, cardFronts);
		var backStyleChoices = document.getElementsByClassName(showHideBackBackgroundStyleChoiceClassName)[0].childNodes;
		var cardBacks = document.getElementsByClassName(cardBackClassName);
		makeColorChoicesChangeColor(backStyleChoices, cardBacks);
		
		var contentToShowOnClickFrontStyle = document.getElementsByClassName(showHideFrontBackgroundStyleChoiceClassName)[0];
		var expandButtonSVGWrappingDivFrontStyle = document.getElementsByClassName(expandFrontStyleChoiceSVGWrapDivClassName)[0];
		makeExpandMoreLessButtonReactOnClick(expandButtonSVGWrappingDivFrontStyle, contentToShowOnClickFrontStyle);
		var contentToShowOnClickBackStyle = document.getElementsByClassName(showHideBackBackgroundStyleChoiceClassName)[0];
		var expandButtonSVGWrappingDivBackStyle = document.getElementsByClassName(expandBackStyleChoiceSVGWrapDivClassName)[0];
		makeExpandMoreLessButtonReactOnClick(expandButtonSVGWrappingDivBackStyle, contentToShowOnClickBackStyle);
		var contentToShowOnClickNewTask = document.getElementsByClassName(barNewTaskInsidesClassName)[0];
		var expandButtonSVGWrappingDivNewTask = document.getElementsByClassName(expandButtonSVGWrappingDivClassName)[0];
		makeExpandMoreLessButtonReactOnClick(expandButtonSVGWrappingDivNewTask, contentToShowOnClickNewTask);
	}
	
	function makeColorChoicesChangeColor(choices, elementsToChangeColor) {
		for (var i = 0; i < choices.length; i++) {
			choices[i].addEventListener('click', function(e) {
				//var newBackgroundColor = window.getComputedStyle(e.target).getPropertyValue('background-color') || window.getComputedStyle(e.target).getPropertyValue('background');
				var newBackgroundColor = window.getComputedStyle(e.target).getPropertyValue('background-color');
				var newBackgroundImage = window.getComputedStyle(e.target).getPropertyValue('background-image');
				var newBackgroundSize = window.getComputedStyle(e.target).getPropertyValue('background-size');
				for (var j = 0; j < elementsToChangeColor.length; j++) {
					elementsToChangeColor[j].style.backgroundColor = 'none';
					elementsToChangeColor[j].style.backgroundColor = newBackgroundColor;
					elementsToChangeColor[j].style.backgroundImage = newBackgroundImage;
					elementsToChangeColor[j].style.backgroundSize = newBackgroundSize;
					var elementsToChangeColorChildren = elementsToChangeColor[j].childNodes;
					for (var k = 0; k < elementsToChangeColorChildren.length; k++) {
						elementsToChangeColorChildren[k].style.backgroundColor = 'none';
						elementsToChangeColorChildren[k].style.background = 'none';
						//elementsToChangeColorChildren[k].style.background = newBackgroundColor; 
					}
				}
			});
		}
	}
	
	/*function makeColorChoicesChangeColor(choices, elementsToChangeColor) {
		var choices = document.getElementsByClassName(backgroundStyleChoiceClassName)[0].childNodes;
		for (var i = 0; i < choices.length; i++) {
			choices[i].addEventListener('click', function(e) {
				var cardFronts = document.getElementsByClassName(cardFrontClassName);
				var newBackgroundColor = window.getComputedStyle(e.target).getPropertyValue('background-color');
				for (var j = 0; j < cardFronts.length; j++) {
					cardFronts[j].style.backgroundColor = newBackgroundColor;
					var cardFrontsChildren = cardFronts[j].childNodes;
					for (var k = 0; k < cardFrontsChildren.length; k++) {
						cardFrontsChildren[k].style.backgroundColor = newBackgroundColor; 
					}
				}
			});
		}
	}*/
	
	function makeNewTaskContainerFollowScroll() {
		/*$(window).scroll(function () {
		$('.' + newTaskContainerClassName).css('top', $(this).scrollTop());
		});*/
		window.addEventListener('scroll', function() {
			var newTaskContainer = document.getElementsByClassName(newTaskContainerClassName)[0];
			var scrolled = window.pageYOffset || document.documentElement.scrollTop;
			newTaskContainer.style.top = scrolled;
			console.log(scrolled);
			console.log(newTaskContainer.style.top);
		});
	}
	
	function makeShowMainMenuButtonReactOnClick() {
		var showMenuButton = document.getElementsByClassName(showMenuWithConfigurationButtonClassName)[0];
		showMenuButton.addEventListener('click', showMainMenuButtonClickHandler);
	}
	
	function showMainMenuButtonClickHandler(e) {
		var mainMenu = document.getElementsByClassName(mainConfigurationMenuClassName)[0];
		if (parseFloat(window.getComputedStyle(mainMenu).left) < 0) {
		//if (!mainMenu.style.display || mainMenu.style.display == 'none') {
			//mainMenu.style.display = 'flex';
			mainMenu.style.transition = 'all 0.9s ease';
			mainMenu.style.left = '5px';
			var mainContainers = document.getElementsByClassName(mainContainersClassName);
			saveMainContainersOpacityToSessionStorage();
			makeSecondaryElementsMoreTransparent(mainContainers);
		}
	}
	
	function makeSecondaryElementsMoreTransparent(secondaryElements) {
		for (var i = 0; i < secondaryElements.length; i++) {
				secondaryElements[i].style.opacity = '0.5';
			}
	}
	
	function saveMainContainersOpacityToSessionStorage() {
	var mainContainers = document.getElementsByClassName(mainContainersClassName);
	var mainContainersOpacity = [];
	for (var i = 0; i < mainContainers.length; i++) {
		mainContainersOpacity.push(mainContainers[i].style.opacity);
	}
	sessionStorage.setItem(keyForMainContainersOpacityFromSessionStorage, mainContainersOpacity);
	}

	function setSavedMainContainersOpacityFromSessionStorage() {
	var retrieveSavedOpacitiesInStringFormat = sessionStorage.getItem(keyForMainContainersOpacityFromSessionStorage);
	
	if (retrieveSavedOpacitiesInStringFormat != null && typeof(retrieveSavedOpacitiesInStringFormat) !== undefined) {
			var retrieveSavedOpacities = retrieveSavedOpacitiesInStringFormat.split(',');
			var mainContainers = document.getElementsByClassName(mainContainersClassName);
			for (var i = 0; i < retrieveSavedOpacities.length; i++) {
				mainContainers[i].style.opacity = retrieveSavedOpacities[i];
			}
		}
	}
	
	function makeHideMainMenuButtonReactOnClick() {
		var hideMenuDiv = document.getElementsByClassName(closeMainConfigurationMenuDivClassName)[0];
		hideMenuDiv.addEventListener('click', hideMenuDivClickHandler);
	}
	
	function hideMenuDivClickHandler(e) {
		var mainMenu = document.getElementsByClassName(mainConfigurationMenuClassName)[0];
		if (parseFloat(window.getComputedStyle(mainMenu).left) >= 0) {
			mainMenu.style.transition = 'all 1.0s ease';
			mainMenu.style.left = '-1000px';
			setSavedMainContainersOpacityFromSessionStorage();
		}
		/*if (mainMenu.style.display == 'flex') {
			mainMenu.style.transform = 'translate(0, -' + mainMenu.offsetWidth + ')';
			mainMenu.style.transition = 'all 1.0s ease-in-out';
			mainMenu.style.display = 'none';
			setSavedMainContainersOpacityFromSessionStorage();
		}*/
	}
	
	function makeTextInputAutoclear(textInput, defaultText) {
		textInput.addEventListener('focus', {handleEvent: clearTextAreaOnClick, defaultText: defaultText});
		textInput.addEventListener('focusout', {handleEvent: restoreDefaultTextIfEmpty, defaultText: defaultText});
	}
	
	function makeExpandMoreLessButtonReactOnClick(hideShowButtonSVGWrappingDiv, contentToShowOnClick) {
		hideShowButtonSVGWrappingDiv.addEventListener('click', {handleEvent: btnHideShowClickHandler, hideShowButtonSVGWrappingDiv: hideShowButtonSVGWrappingDiv, contentToShowOnClick: contentToShowOnClick});
	}
	
	function btnHideShowClickHandler(e) {
		showHideExpandingContent(this.hideShowButtonSVGWrappingDiv, this.contentToShowOnClick);
		//makeExpandMoreLessButtonReactOnClick();
	}
	
	function makeHideShowButtonReactOnClick() {
	var btnHideShowTaskBar = document.getElementsByClassName(hideShowBarNewTaskClassName)[0];
	btnHideShowTaskBar.addEventListener('click', btnHideShowTaskBarClickHandler);
	}
	
	function btnHideShowTaskBarClickHandler(e) {
		var contentToShowOnClick = document.getElementsByClassName(barNewTaskInsidesClassName)[0];
		var btnHideShowSVGWrappingDiv = document.getElementsByClassName(expandButtonSVGWrappingDivClassName)[0];
		showHideExpandingContent(btnHideShowSVGWrappingDiv, contentToShowOnClick);
		makeHideShowButtonReactOnClick();
	}
	
	function showHideExpandingContent(btnHideShowSVGWrappingDiv, contentToShowOnClick) {
		if (!contentToShowOnClick.style.display || contentToShowOnClick.style.display == 'none') {
			contentToShowOnClick.style.display = 'flex';
			btnHideShowSVGWrappingDiv.innerHTML = innerHTMLForExpandLessSVG;
		}
		else {
			contentToShowOnClick.style.display = 'none';
			btnHideShowSVGWrappingDiv.innerHTML = innerHTMLForExpandMoreSVG;
		}
	}
	
	function makeAddButtonAddNewTask() {
		var addButton = document.getElementsByClassName(addNewTaskButtonClassName)[0];
		addButton.addEventListener('click', createNewTask);
	}
	
	function createNewTask(e) {
		var cardsContainer = document.getElementsByClassName(cardsContainerClassName)[0];
		var newCardArea = createNewMaterialCard(cardsContainer, cardsClassName);
		newCardFront = newCardArea.getElementsByClassName(cardFrontClassName)[0];

		var barNewTaskInsidesTitle = document.getElementsByClassName(barNewTaskInsidesTitleClassName)[0];
		var barNewTaskInsidesTask = document.getElementsByClassName(barNewTaskInsidesTaskClassName)[0];
		newCardFront.innerHTML = '<textarea class="'+ titleTextClassName + ' ' + boxSizingItemsClassName + '">' + barNewTaskInsidesTitle.value + '</textarea><textarea class="'+ taskTextClassName + ' ' + boxSizingItemsClassName + '">' + barNewTaskInsidesTask.value + '</textarea>';
		cardsContainer.insertBefore(newCardArea, cardsContainer.childNodes[cardsContainer.childNodes.length - 2]);
		
		configureNewCard(newCardArea.childNodes[0]);
		writeButtonFunctionsOnButton(newCardArea.childNodes[0]);
		addSubtaskConfigurationAbility(newCardArea.childNodes[0]);
		
		var titleTextarea = newCardFront.getElementsByClassName(titleTextClassName)[0];
		makeTextInputAutoclear(titleTextarea, 'Title');
		
		var taskTextarea = newCardFront.getElementsByClassName(taskTextClassName)[0];
		var title = newCardFront.getElementsByClassName(titleTextClassName)[0];
		var startOfFreeArea = parseInt(taskTextarea.getBoundingClientRect().top);
		var endOfFreeArea = parseInt(newCardFront.getBoundingClientRect().bottom) - parseInt(window.getComputedStyle(newCardFront).getPropertyValue('border-width'));
		taskTextarea.style.height = parseInt(endOfFreeArea - startOfFreeArea) + 'px';
		makeTextInputAutoclear(taskTextarea, 'Task');
		
		fadeoutStartBackgroundImage();
	}
	
	function fadeoutStartBackgroundImage() {
		var backgroundImg = document.getElementsByClassName(temporaryStartPictureClassname)[0];
		backgroundImg.style.transition = 'all 0.7s ease-in-out';
		backgroundImg.style.opacity = 0;
		backgroundImg.style.height = '0px';
	}
	
	function configureNewCard(card) {
	setNewCardOrder(card);
	var cardToArray = [];
	cardToArray.push(card);
	//makeCardsCheckable(cardToArray);
	if (card.className.indexOf(cardsClassName) != -1) {
		makeCardsDraggable(cardToArray);
	}
	makeCardsFlippable(cardToArray);
	makeCardsCloseable(cardToArray);
	cards = document.getElementsByClassName(cardsClassName);
	configureCardAreasWidth();
}
	
function writeButtonFunctionsOnButton(card) {
	var front = card.getElementsByClassName(cardFrontClassName)[0];
	var back = card.getElementsByClassName(cardBackClassName)[0];
	var frontFlip = front.getElementsByClassName(flippableAreaOnCardClassName)[0];
	var frontClose = front.getElementsByClassName(closeableAreaOnCardClassName)[0];
	var backFlip = back.getElementsByClassName(flippableAreaOnCardClassName)[0];
	var backClose = back.getElementsByClassName(closeableAreaOnCardClassName)[0];
	frontFlip.innerHTML = innerHTMLForSubtasks;
	backFlip.innerHTML = innerHTMLForSubtasksBackToMainTask;
	frontClose.innerHTML = innerHTMLForCloseArea;
	backClose.innerHTML = innerHTMLForCloseArea;
	
	if (card.className.indexOf(cardsClassName) != -1) {
		var frontDrag = front.getElementsByClassName(draggableAreaOnCardClassName)[0];
		var backDrag = back.getElementsByClassName(draggableAreaOnCardClassName)[0];
		frontDrag.innerHTML = innerHTMLForShuffleCards;
		backDrag.innerHTML = innerHTMLForShuffleCards;
	}
}

function addSubtaskConfigurationAbility(card) {
	var front = card.getElementsByClassName(cardFrontClassName)[0];
	var back = card.getElementsByClassName(cardBackClassName)[0];
	
	/*var emptyDiv = document.createElement('div');
	emptyDiv.width = '100%';
	emptyDiv.style.clear = 'both';
	back.appendChild(emptyDiv);*/

	var chooseSubtaskSelect = document.createElement('select');
	chooseSubtaskSelect.className = 'select2 ' + selectSubtasksClassName;
	chooseSubtaskSelect.name = 'subtasks';
	chooseSubtaskSelect.style.width = '100%';
	back.appendChild(chooseSubtaskSelect);
	$(chooseSubtaskSelect).select2({
		placeholder: "Select subtask",
		//allowClear: true
	});
	var newOption = new Option();
	$(chooseSubtaskSelect).append(newOption); //for the placeholder to show when no option is chosen
	configureSubtasksSelectToReactOnChange(chooseSubtaskSelect);
		
	var labelAddNewSubtask = document.createElement('label');
	labelAddNewSubtask.innerHTML = 'Add new subtask: ';
	back.appendChild(labelAddNewSubtask);
	labelAddNewSubtask.style.display = 'block';
	//labelAddNewSubtask.style.width = '100%';
	labelAddNewSubtask.style.left = '0';
	labelAddNewSubtask.style.right = '0';
	labelAddNewSubtask.style.marginTop = '10px';
	labelAddNewSubtask.style.marginBottom = '10px';
	labelAddNewSubtask.style.marginLeft = '5px';
		
	var titleOfNewSubtask = document.createElement('textarea');
	titleOfNewSubtask.value = 'Title';
	titleOfNewSubtask.className = newSubtaskInsidesTitleClassName + ' ' + titleTextClassName + ' ' + boxSizingItemsClassName;
	titleOfNewSubtask.style.width = '100%';
	titleOfNewSubtask.style.background = 'paleGreen';
	makeTextInputAutoclear(titleOfNewSubtask, 'Title');
	back.appendChild(titleOfNewSubtask);
		
	var taskOfNewSubtask = document.createElement('textarea');
	taskOfNewSubtask.value = 'Task';
	taskOfNewSubtask.className = newSubtaskInsidesTaskClassName + ' ' + taskTextClassName + ' ' + boxSizingItemsClassName;
	taskOfNewSubtask.style.width = '100%';
	taskOfNewSubtask.style.height = '50%';
	taskOfNewSubtask.style.background = 'paleGreen';
	makeTextInputAutoclear(taskOfNewSubtask, 'Task');
	back.appendChild(taskOfNewSubtask);
		
	var addButtonForNewSubtask = document.createElement('div');
	//addButtonForNewSubtask.type = 'button';
	addButtonForNewSubtask.className = addNewSubtaskButtonClassName;
	//addButtonForNewSubtask.value = 'Add';
	addButtonForNewSubtask.innerHTML = innerHTMLForAddArea;
	addButtonForNewSubtask.style.float = 'right';
	addButtonForNewSubtask.style.clear = 'both';
	//addButtonForNewSubtask.style.height = '50px';
	addButtonForNewSubtask.style.display = 'block';
	addButtonForNewSubtask.addEventListener('click', createNewSubtask);
	back.appendChild(addButtonForNewSubtask);
}

function createNewSubtask(e) {
	var parentCard = e.target.parentNode.parentNode;
	var newCard = createNewMaterialCard(parentCard, innerCardsClassName);
	newCardFront = newCard.getElementsByClassName(cardFrontClassName)[0];

	var newSubtaskInsidesTitle = e.target.parentNode.getElementsByClassName(newSubtaskInsidesTitleClassName)[0];
	var newSubtaskInsidesTask = e.target.parentNode.getElementsByClassName(newSubtaskInsidesTaskClassName)[0];
	newCardFront.innerHTML = '<textarea class="'+ titleTextClassName + ' ' + boxSizingItemsClassName + '">' + newSubtaskInsidesTitle.value + '</textarea><textarea class="'+ taskTextClassName + ' ' + boxSizingItemsClassName + '">' + newSubtaskInsidesTask.value + '</textarea>';
	parentCard.appendChild(newCard);
	
	configureNewCard(newCard);
	addSubtaskConfigurationAbility(newCard);
	newCard.style.display = 'flex';
	raiseInnerCardsBeforeAppearance(newCard);
	
	var titleTextarea = newCardFront.getElementsByClassName(titleTextClassName)[0];
	makeTextInputAutoclear(titleTextarea, 'Title');
		
	var taskTextarea = newCardFront.getElementsByClassName(taskTextClassName)[0];
	var title = newCardFront.getElementsByClassName(titleTextClassName)[0];
	var startOfFreeArea = parseInt(taskTextarea.getBoundingClientRect().top);
	var endOfFreeArea = parseInt(newCardFront.getBoundingClientRect().bottom) - parseInt(window.getComputedStyle(newCardFront).getPropertyValue('border-width'));
	//taskTextarea.style.height = '50%';
	taskTextarea.style.height = parseInt(endOfFreeArea - startOfFreeArea) + 'px';
	makeTextInputAutoclear(taskTextarea, 'Task');
	
	var subtasksSelect = parentCard.getElementsByClassName(selectSubtasksClassName)[0];
	var newOption = new Option(newSubtaskInsidesTitle.value, parentCard.getElementsByClassName(innerCardsClassName).length);
	$(subtasksSelect).append(newOption);
	
	writeButtonFunctionsOnButton(newCard);
	$(subtasksSelect).select2('focus');
}

function configureSubtasksSelectToReactOnChange(subtasksSelect) {
	makeCardsAppearWhenSelected(subtasksSelect, innerCardsClassName);
	makeCardsDisappearWhenUnselected(subtasksSelect, innerCardsClassName);
}

function clearTextAreaOnClick(e) {
	if (e.target.value == this.defaultText) {
		e.target.value = '';
	}
}

function restoreDefaultTextIfEmpty(e) {
	if (e.target.value == '') {
		e.target.value = this.defaultText;
	}
}
</script>
    </body>
</html>
